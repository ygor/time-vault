
openapi: 3.0.3
info:
  title: Seldon TimeVault API
  description: |
    API for Seldon TimeVault - a time-locked message vault.
    This API enables secure storage and retrieval of time-locked messages.
  version: 1.1.0
  contact:
    name: Seldon TimeVault Support
    email: admin@seldontimevault.io
    url: https://seldontimevault.io/support

servers:
  - url: https://api.seldontimevault.io/v1
    description: Production server
  - url: https://api-staging.seldontimevault.io/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Development server

tags:
  - name: Authentication
    description: User authentication and profile management
  - name: Vaults
    description: TimeVault management operations
  - name: Messages
    description: Time-locked message management
  - name: Sharing
    description: Vault sharing capabilities
  - name: Media
    description: Media upload and management

paths:
  /auth/authenticate:
    post:
      tags:
        - Authentication
      summary: Authenticate user
      description: Authenticate a user with the provided credentials
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/signout:
    post:
      tags:
        - Authentication
      summary: Sign out
      description: Sign out the currently authenticated user
      operationId: signOut
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully signed out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully signed out"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /users/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Get the profile of the currently authenticated user
      operationId: getUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      tags:
        - Authentication
      summary: Update user profile
      description: Update the profile of the currently authenticated user
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "hari.seldon"
                  description: New username for the user
      responses:
        '200':
          description: Successfully updated profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Username already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vaults:
    get:
      tags:
        - Vaults
      summary: Get user's vaults
      description: Get all vaults owned by the authenticated user
      operationId: getUserVaults
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of vaults to return
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of vaults to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of vaults
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vault'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Vaults
      summary: Create a new vault
      description: Create a new TimeVault for the authenticated user
      operationId: createVault
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Foundation Predictions"
                  maxLength: 100
                description:
                  type: string
                  example: "My predictions for the future of the Foundation"
                  maxLength: 500
      responses:
        '201':
          description: Vault created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /vaults/shared:
    get:
      tags:
        - Vaults
      summary: Get shared vaults
      description: Get all vaults shared with the authenticated user
      operationId: getSharedVaults
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of vaults to return
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of vaults to skip
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of shared vaults
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vault'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /vaults/{vaultId}:
    parameters:
      - name: vaultId
        in: path
        description: ID of the vault
        required: true
        schema:
          type: string
    get:
      tags:
        - Vaults
      summary: Get vault details
      description: Get details of a specific vault, including messages
      operationId: getVaultDetails
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Vault details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Vaults
      summary: Delete vault
      description: Delete a vault and all its messages
      operationId: deleteVault
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Vault deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Vaults
      summary: Update vault
      description: Update vault details
      operationId: updateVault
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Updated Foundation Predictions"
                  maxLength: 100
                description:
                  type: string
                  example: "Updated predictions for the future of the Foundation"
                  maxLength: 500
      responses:
        '200':
          description: Vault updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vault'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /vaults/{vaultId}/messages:
    parameters:
      - name: vaultId
        in: path
        description: ID of the vault
        required: true
        schema:
          type: string
    get:
      tags:
        - Messages
      summary: Get vault messages
      description: Get all messages in a vault
      operationId: getVaultMessages
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of messages to return
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of messages to skip
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: status
          in: query
          description: Filter by message status
          schema:
            type: string
            enum: [locked, unlocked, all]
            default: all
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Messages
      summary: Add a message to vault
      description: Add a new time-locked message to a vault
      operationId: addVaultMessage
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreation'
      responses:
        '201':
          description: Message added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /vaults/{vaultId}/messages/{messageId}:
    parameters:
      - name: vaultId
        in: path
        description: ID of the vault
        required: true
        schema:
          type: string
      - name: messageId
        in: path
        description: ID of the message
        required: true
        schema:
          type: string
    get:
      tags:
        - Messages
      summary: Get message details
      description: Get details of a specific message, including content if unlocked
      operationId: getMessageDetails
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Message details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Messages
      summary: Delete message
      description: Delete a message from a vault
      operationId: deleteMessage
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Message deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /vaults/{vaultId}/share:
    parameters:
      - name: vaultId
        in: path
        description: ID of the vault
        required: true
        schema:
          type: string
    post:
      tags:
        - Sharing
      summary: Share vault with user
      description: Share a vault with another user via their identifier or username
      operationId: shareVault
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareVaultRequest'
      responses:
        '200':
          description: Vault shared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Vault shared successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      tags:
        - Sharing
      summary: Get vault shares
      description: Get all users the vault is shared with
      operationId: getVaultShares
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users the vault is shared with
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /vaults/{vaultId}/share/{userId}:
    parameters:
      - name: vaultId
        in: path
        description: ID of the vault
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: ID of the user to remove sharing
        required: true
        schema:
          type: string
    delete:
      tags:
        - Sharing
      summary: Remove vault sharing
      description: Stop sharing a vault with a specific user
      operationId: removeVaultSharing
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Sharing removed successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /media/upload:
    post:
      tags:
        - Media
      summary: Upload media
      description: Upload media file (image or video)
      operationId: uploadMedia
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Media file to upload
                  maxLength: 50000000  # 50MB limit
                contentType:
                  type: string
                  enum: [image, video]
                  description: Type of media being uploaded
      responses:
        '200':
          description: Upload successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaUploadResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: Payload too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: Unsupported media type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Check if the API is up and running
      operationId: healthCheck
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
                  version:
                    type: string
                    example: "1.1.0"
                  timestamp:
                    type: string
                    format: date-time

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user
          example: "1"
        username:
          type: string
          description: User's chosen username
          example: "hari.seldon"
        identifier:
          type: string
          description: User's unique identifier
          example: "hariseldn@foundation.gal"
        createdAt:
          type: string
          format: date-time
          description: When the user account was created

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: JWT authentication token
          example: "eyJhbG..."
        expiresAt:
          type: string
          format: date-time
          description: When the token expires

    Vault:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the vault
          example: "v1"
        name:
          type: string
          description: Name of the vault
          example: "Foundation Predictions"
        description:
          type: string
          description: Description of the vault's purpose
          example: "My predictions for the future of the Foundation"
        ownerId:
          type: string
          description: User ID of the vault creator/owner
          example: "1"
        createdAt:
          type: string
          format: date-time
          description: When the vault was created
        updatedAt:
          type: string
          format: date-time
          description: When the vault was last updated
        messages:
          type: array
          description: Messages in the vault
          items:
            $ref: '#/components/schemas/Message'
        sharedWith:
          type: array
          description: User IDs the vault is shared with
          items:
            type: string
            example: "2"
        messageCount:
          type: object
          description: Count of messages by status
          properties:
            total:
              type: integer
              example: 10
            locked:
              type: integer
              example: 7
            unlocked:
              type: integer
              example: 3

    Message:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the message
          example: "m1"
        title:
          type: string
          description: Title of the message
          example: "First Crisis"
        contentType:
          type: string
          description: Type of content in the message
          enum: [text, image, video]
          example: "text"
        unlockTime:
          type: string
          format: date-time
          description: When the message will be unlocked
        createdAt:
          type: string
          format: date-time
          description: When the message was created
        createdBy:
          type: string
          description: User ID of the message creator
          example: "1"
        isLocked:
          type: boolean
          description: Whether the message is currently locked
          example: true
        content:
          type: string
          description: Message content (only present if message is unlocked)
          example: "The first Seldon crisis will occur when trade routes are threatened."
        mediaUrl:
          type: string
          description: URL to access the media file if contentType is image or video
          example: "https://media.seldontimevault.io/content/abc123"
        size:
          type: integer
          description: Size of the content in bytes
          example: 1024

    MessageCreation:
      type: object
      required:
        - title
        - unlockTime
        - contentType
      properties:
        title:
          type: string
          description: Title of the message
          example: "First Crisis"
          minLength: 1
          maxLength: 100
        contentType:
          type: string
          description: Type of content in the message
          enum: [text, image, video]
          example: "text"
        content:
          type: string
          description: Required if contentType is text
          example: "The first Seldon crisis will occur when trade routes are threatened."
          maxLength: 10000
        unlockTime:
          type: string
          format: date-time
          description: When the message should be unlocked

    MediaUploadResponse:
      type: object
      properties:
        mediaUrl:
          type: string
          description: URL to access the media
          example: "https://media.seldontimevault.io/content/abc123"
        mimeType:
          type: string
          description: MIME type of the uploaded file
          example: "image/jpeg"
        size:
          type: integer
          description: Size of the file in bytes
          example: 1048576

    AuthenticationRequest:
      type: object
      required:
        - identifier
        - verificationCode
      properties:
        identifier:
          type: string
          description: User identifier (email or other unique identifier)
          example: "hariseldn@foundation.gal"
        verificationCode:
          type: string
          description: Code to verify identity
          example: "123456"
        username:
          type: string
          description: Optional username to associate with this account
          example: "hari.seldon"
          minLength: 3
          maxLength: 30
          pattern: "^[a-zA-Z0-9_.-]+$"

    ShareVaultRequest:
      type: object
      description: Request to share a vault with another user
      oneOf:
        - required: [identifier]
        - required: [username]
      properties:
        identifier:
          type: string
          description: Identifier to share with
          example: "gaal@foundation.gal"
        username:
          type: string
          description: Username to share with
          example: "gaal.dornick"
          pattern: "^[a-zA-Z0-9_.-]+$"
        permissions:
          type: string
          enum: [read, readwrite]
          default: read
          description: Permission level to grant to the shared user

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
          example: "INVALID_PARAMETER"
        message:
          type: string
          description: Error message
          example: "Invalid parameter: username"
        details:
          type: object
          description: Additional error details
          example:
            field: "username"
            constraint: "Username must be at least 3 characters long"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Forbidden:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    TooManyRequests:
      description: Rate limit exceeded
      headers:
        Retry-After:
          schema:
            type: integer
            description: Time in seconds to wait before making another request
          example: 60
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'